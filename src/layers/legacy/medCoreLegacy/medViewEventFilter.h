/*=========================================================================

 medInria

 Copyright (c) INRIA 2013 - 2018. All rights reserved.
 See LICENSE.txt for details.

  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.

=========================================================================*/

#pragma once

// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////


#include <dtkCoreSupport/dtkAbstractObject.h>

#include <QMouseEvent>

#include <medCoreLegacyExport.h>

//Forward declarations
class medAbstractView;
class medAbstractViewScene;
class medSegmentationSelectorToolBox;
class QMouseEvent;
class QGraphicsSceneMouseEvent;

/** class medViewEventFilter
 * This class can be added as an EventFilter on a medAbstractView.
 * The class allows the retreival of the mouse clicks, including where the mouse was clicked in the coordinates defined by the view.
 *
 * (see QObject::eventFilter & QObject::installEventFilter)
 */
class MEDCORELEGACY_EXPORT medViewEventFilter : public dtkAbstractObject
{
    Q_OBJECT

public:
     medViewEventFilter(dtkAbstractObject * parent = nullptr);
    ~medViewEventFilter() override;

    QString description() const override;
    QString identifier() const override;

    void installOnView(medAbstractView * view);

    void removeFromView(medAbstractView * view);

    void removeFromAllViews();

protected:
    bool eventFilter(QObject *obj, QEvent *event) override;

    virtual bool mousePressEvent( medAbstractView *view, QMouseEvent *mouseEvent );
    virtual bool mouseReleaseEvent( medAbstractView *view, QMouseEvent *mouseEvent );
    virtual bool mouseMoveEvent( medAbstractView *view, QMouseEvent *mouseEvent );

    virtual bool mousePressEvent( medAbstractView *view, QGraphicsSceneMouseEvent *mouseEvent );
    virtual bool mouseReleaseEvent( medAbstractView *view, QGraphicsSceneMouseEvent *mouseEvent );
    virtual bool mouseMoveEvent( medAbstractView *view, QGraphicsSceneMouseEvent *mouseEvent );

    static QObject * objectToFilter( medAbstractView * view );

protected slots:
    void onViewDestroyed(QObject *obj);

private:
    static QString s_description();

    medSegmentationSelectorToolBox * m_segmentationController;
    QSet<medAbstractView *> m_views;
    using FilterObjToViewType = QHash<QObject *, medAbstractView *> ;
    FilterObjToViewType m_filterObjToView;
};



